name: Python Wheel

# This workflow builds and publishes wheels for the python-bindings on new releases.
#
# The workflow was adapted from the one generated by `maturin generate-ci github`

on:
  push:
    tags:
      - "v*" # Build whenever a full version of naviz is released

permissions:
  contents: read

env:
  DIR: python

jobs:
  generate-matrix:
    name: Generate Build Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - name: Build Matrix
        id: matrix
        run: |
          echo matrix=$(jq -rc 'map([.arch=.arch[]]) | flatten' <<EOF
            [
              {
                "os": "linux",
                "image": "ubuntu-latest",
                "arch": ["x86_64", "x86", "aarch64", "armv7", "s390x", "ppc64le"],
                "manylinux": "auto"
              }, {
                "os": "musllinux",
                "image": "ubuntu-latest",
                "arch": ["x86_64", "x86", "aarch64", "armv7"],
                "manylinux": "musllinux_1_2"
              }, {
                "os": "macos",
                "image": "macos-latest",
                "arch": ["x86_64", "aarch64"]
              }, {
                "os": "windows",
                "image": "windows-latest",
                "arch": ["x86_64", "x86"]
              }
            ]
          EOF
          ) > "$GITHUB_OUTPUT"

  build:
    needs: generate-matrix
    strategy:
      matrix:
        include: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    name: Build ${{ matrix.os }} ${{ matrix.arch }}
    runs-on: ${{ matrix.image }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          working-directory: ${{ env.DIR }}
          target: ${{ matrix.arch }}
          args: --release --out dist --find-interpreter
          sccache: "true"
          manylinux: ${{ matrix.manylinux }}
          docker-options: "-e SCCACHE_LOG=debug"
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.arch }}
          path: ${{ env.DIR }}/dist

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          working-directory: ${{ env.DIR }}
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: ${{ env.DIR }}/dist

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build, sdist]
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - uses: actions/download-artifact@v4
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: "wheels-*/*"
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        if: false
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*
