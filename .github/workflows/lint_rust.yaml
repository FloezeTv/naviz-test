name: Lint Rust

on:
  pull_request:
  # push:

env:
  CACHE_KEY: lint-rust
  # Fail on all warnings (including lints)
  # RUSTFLAGS: "-Dwarnings"

jobs:
  clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - name: Restore Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ env.CACHE_KEY }}
          cache-on-failure: true
      - run: cargo install clippy-reviewdog-filter
      - uses: reviewdog/action-setup@v1
      - run: cargo clippy --all-features --all-targets --message-format=json ">&1 | clippy-reviewdog-filter | reviewdog -f=checkstyle -reporter=github-pr-review
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # - uses: giraffate/clippy-action@v1
      #   with:
      #     reporter: "github-pr-review"
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
  # clippy:
  #   name: Clippy
  #   runs-on: ubuntu-latest
  #   permissions:
  #     actions: read
  #     contents: read
  #     security-events: write
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: Restore Rust Cache
  #       uses: Swatinem/rust-cache@v2
  #       with:
  #         key: ${{ env.CACHE_KEY }}
  #     - name: Install sarif tools
  #       run: cargo install clippy-sarif sarif-fmt
  #     - name: Lint Rust
  #       run: cargo clippy --all-features --all-targets --message-format=json | clippy-sarif > lint.sarif
  #       continue-on-error: true
  #     - name: Upload lint results
  #       uses: github/codeql-action/upload-sarif@v3
  #       with:
  #         sarif_file: lint.sarif
# jobs:
#   rust:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4
#         with:
#           ref: ${{ github.ref }}
#       - name: Restore Rust Cache
#         uses: Swatinem/rust-cache@v2
#         with:
#           key: ${{ env.CACHE_KEY }}
#       - uses: clechasseur/rs-clippy-check@v4
#         with:
#           args: --all-targets --all-features

